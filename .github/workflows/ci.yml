name: CI

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  sizes:
    strategy:
      fail-fast: true

    name: Contract sizes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Contract sizes
        run: |
          forge --version
          forge build --sizes --skip CryticTester --skip CryticVaultsTester --skip CryticNonTransferrableScaledTokenDifferentialCryticTester
        id: build

  fmt:
    strategy:
      fail-fast: true

    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Format
        run: |
          forge fmt --check
        id: fmt

  test:
    strategy:
      fail-fast: true

    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Test
        run: |
          forge test -vvv
        id: test

  testFork:
    strategy:
      fail-fast: true

    name: Fork Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Fork Test
        run: |
          forge test -vvv --fail-fast
        id: test
        env:
          API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
          FOUNDRY_INVARIANT_RUNS: 0
          FOUNDRY_INVARIANT_DEPTH: 0
          FOUNDRY_PROFILE: fork

  slither:
    strategy:
      fail-fast: true

    name: Slither
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Run Slither
        uses: crytic/slither-action@v0.4.0
        id: slither
        with:
          fail-on: low


  solhint:
    strategy:
      fail-fast: true

    name: Solhint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: npm install

      - name: Run solhint
        run: npm run solhint

  invariants:
    needs: [sizes, fmt, test, testFork, slither, solhint]
    strategy:
      fail-fast: true
      matrix:
        mode: [assertion, property, medusa]

    name: Invariants
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Crytic-compile
        run: |
          pip install crytic-compile

      - name: Install Slither
        run: |
          pip install slither-analyzer

      - name: Prepare Crytic
        run: |
          ./script/prepare_crytic.sh

      - name: Install Fuzzer (${{ matrix.mode }})
        run: |
          if [[ "${{ matrix.mode }}" == "assertion" || "${{ matrix.mode }}" == "property" ]]; then
            TOOL="echidna"
            URL="https://github.com/crytic/echidna/releases/download/v2.2.6/echidna-2.2.6-x86_64-linux.tar.gz"
          elif [[ "${{ matrix.mode }}" == "medusa" ]]; then
            TOOL="medusa"
            URL="https://github.com/crytic/medusa/releases/download/v1.1.1/medusa-linux-x64.tar.gz"
          else
            echo "Unsupported mode: ${{ matrix.mode }}"
            exit 1
          fi

          wget "$URL" -O "$TOOL.tar.gz"
          tar -xvkf "$TOOL.tar.gz"
          rm "$TOOL.tar.gz"
          ./$TOOL --version

      - name: Run Fuzzer (${{ matrix.mode }})
        run: |
          if [[ "${{ matrix.mode }}" == "assertion" || "${{ matrix.mode }}" == "property" ]]; then
            ./echidna . --contract CryticTester --config echidna.yaml --test-mode ${{ matrix.mode }} --corpus-dir corpus --test-limit 10000
          elif [[ "${{ matrix.mode }}" == "medusa" ]]; then
            sed -i 's/\"testLimit\":.*/\"testLimit\": 50000,/g' medusa.json
            sed -i 's/\"corpusDirectory\":.*/\"corpusDirectory\": \"medusa-corpus\",/g' medusa.json
            ./medusa fuzz
          else
            echo "Unsupported mode: ${{ matrix.mode }}"
            exit 1
          fi


  halmos:
    needs: [sizes, fmt, test, testFork, slither, solhint]
    strategy:
      fail-fast: true

    name: Halmos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Halmos
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv tool install --python 3.12 halmos
          uv tool upgrade halmos

      - name: Halmos
        run: |
          halmos

  abi:
    strategy:
      fail-fast: true

    name: ABI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install dependencies
        run: npm install

      - name: ABI
        run: |
          forge build --build-info

      - name: Archive ABI
        uses: actions/upload-artifact@v4
        with:
          name: abi
          path: |
            out/Size.sol/Size.json
            out/SizeFactory.sol/SizeFactory.json
            out/IPriceFeed.sol/IPriceFeed.json
            out/IPool.sol/IPool.json
            out/IERC20Metadata.sol/IERC20Metadata.json
            out/Errors.sol/Errors.json
            out/Events.sol/Events.json

  coverage:
    strategy:
      fail-fast: true

    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install dependencies
        run: npm install

      - name: Setup git config
        run: |
          git config --local user.email "dev@size.cash"
          git config --local user.name "Size"

      - name: Coverage
        run: |
          forge coverage --no-match-coverage "(script|test|deprecated)" --report lcov

      - name: Coveralls
        uses: coverallsapp/github-action@v2

  upload-selectors:
    if: github.ref == 'refs/heads/main'
    strategy:
      fail-fast: true

    name: Upload Selectors
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Upload Selectors
        run: |
          forge selectors upload --all
