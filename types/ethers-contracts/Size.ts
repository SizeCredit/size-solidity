/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type YieldCurveStruct = {
  timeBuckets: BigNumberish[];
  rates: BigNumberish[];
  marketRateMultipliers: BigNumberish[];
};

export type YieldCurveStructOutput = [BigNumber[], BigNumber[], BigNumber[]] & {
  timeBuckets: BigNumber[];
  rates: BigNumber[];
  marketRateMultipliers: BigNumber[];
};

export type BorrowAsLimitOrderParamsStruct = {
  riskCR: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BorrowAsLimitOrderParamsStructOutput = [
  BigNumber,
  YieldCurveStructOutput
] & { riskCR: BigNumber; curveRelativeTime: YieldCurveStructOutput };

export type BorrowAsMarketOrderParamsStruct = {
  lender: string;
  amount: BigNumberish;
  dueDate: BigNumberish;
  exactAmountIn: boolean;
  virtualCollateralFixedLoanIds: BigNumberish[];
};

export type BorrowAsMarketOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber[]
] & {
  lender: string;
  amount: BigNumber;
  dueDate: BigNumber;
  exactAmountIn: boolean;
  virtualCollateralFixedLoanIds: BigNumber[];
};

export type BorrowerExitParamsStruct = {
  loanId: BigNumberish;
  borrowerToExitTo: string;
};

export type BorrowerExitParamsStructOutput = [BigNumber, string] & {
  loanId: BigNumber;
  borrowerToExitTo: string;
};

export type ClaimParamsStruct = { loanId: BigNumberish };

export type ClaimParamsStructOutput = [BigNumber] & { loanId: BigNumber };

export type CompensateParamsStruct = {
  loanToRepayId: BigNumberish;
  loanToCompensateId: BigNumberish;
  amount: BigNumberish;
};

export type CompensateParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  loanToRepayId: BigNumber;
  loanToCompensateId: BigNumber;
  amount: BigNumber;
};

export type DepositParamsStruct = {
  token: string;
  amount: BigNumberish;
  to: string;
};

export type DepositParamsStructOutput = [string, BigNumber, string] & {
  token: string;
  amount: BigNumber;
  to: string;
};

export type InitializeFixedParamsStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  collateralPremiumToLiquidator: BigNumberish;
  collateralPremiumToProtocol: BigNumberish;
  minimumCreditBorrowAsset: BigNumberish;
  collateralTokenCap: BigNumberish;
  borrowATokenCap: BigNumberish;
  debtTokenCap: BigNumberish;
};

export type InitializeFixedParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  crOpening: BigNumber;
  crLiquidation: BigNumber;
  collateralPremiumToLiquidator: BigNumber;
  collateralPremiumToProtocol: BigNumber;
  minimumCreditBorrowAsset: BigNumber;
  collateralTokenCap: BigNumber;
  borrowATokenCap: BigNumber;
  debtTokenCap: BigNumber;
};

export type InitializeGeneralParamsStruct = {
  owner: string;
  priceFeed: string;
  marketBorrowRateFeed: string;
  collateralAsset: string;
  borrowAsset: string;
  feeRecipient: string;
  variablePool: string;
};

export type InitializeGeneralParamsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  owner: string;
  priceFeed: string;
  marketBorrowRateFeed: string;
  collateralAsset: string;
  borrowAsset: string;
  feeRecipient: string;
  variablePool: string;
};

export type FixedLoanStruct = {
  faceValue: BigNumberish;
  faceValueExited: BigNumberish;
  lender: string;
  borrower: string;
  dueDate: BigNumberish;
  liquidityIndexAtRepayment: BigNumberish;
  folId: BigNumberish;
  repaid: boolean;
};

export type FixedLoanStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  faceValue: BigNumber;
  faceValueExited: BigNumber;
  lender: string;
  borrower: string;
  dueDate: BigNumber;
  liquidityIndexAtRepayment: BigNumber;
  folId: BigNumber;
  repaid: boolean;
};

export type FixedLoanOfferStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type FixedLoanOfferStructOutput = [BigNumber, YieldCurveStructOutput] & {
  maxDueDate: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type BorrowOfferStruct = {
  riskCR: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BorrowOfferStructOutput = [BigNumber, YieldCurveStructOutput] & {
  riskCR: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type UserStruct = {
  loanOffer: FixedLoanOfferStruct;
  borrowOffer: BorrowOfferStruct;
  vault: string;
};

export type UserStructOutput = [
  FixedLoanOfferStructOutput,
  BorrowOfferStructOutput,
  string
] & {
  loanOffer: FixedLoanOfferStructOutput;
  borrowOffer: BorrowOfferStructOutput;
  vault: string;
};

export type UserViewStruct = {
  user: UserStruct;
  account: string;
  collateralAmount: BigNumberish;
  borrowAmount: BigNumberish;
  debtAmount: BigNumberish;
};

export type UserViewStructOutput = [
  UserStructOutput,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  user: UserStructOutput;
  account: string;
  collateralAmount: BigNumber;
  borrowAmount: BigNumber;
  debtAmount: BigNumber;
};

export type InitializeVariableParamsStruct = {
  collateralOverdueTransferFee: BigNumberish;
};

export type InitializeVariableParamsStructOutput = [BigNumber] & {
  collateralOverdueTransferFee: BigNumber;
};

export type LendAsLimitOrderParamsStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type LendAsLimitOrderParamsStructOutput = [
  BigNumber,
  YieldCurveStructOutput
] & { maxDueDate: BigNumber; curveRelativeTime: YieldCurveStructOutput };

export type LendAsMarketOrderParamsStruct = {
  borrower: string;
  dueDate: BigNumberish;
  amount: BigNumberish;
  exactAmountIn: boolean;
};

export type LendAsMarketOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  borrower: string;
  dueDate: BigNumber;
  amount: BigNumber;
  exactAmountIn: boolean;
};

export type LiquidateFixedLoanParamsStruct = {
  loanId: BigNumberish;
  minimumCollateralRatio: BigNumberish;
};

export type LiquidateFixedLoanParamsStructOutput = [BigNumber, BigNumber] & {
  loanId: BigNumber;
  minimumCollateralRatio: BigNumber;
};

export type LiquidateFixedLoanWithReplacementParamsStruct = {
  loanId: BigNumberish;
  borrower: string;
  minimumCollateralRatio: BigNumberish;
};

export type LiquidateFixedLoanWithReplacementParamsStructOutput = [
  BigNumber,
  string,
  BigNumber
] & { loanId: BigNumber; borrower: string; minimumCollateralRatio: BigNumber };

export type RepayParamsStruct = { loanId: BigNumberish; amount: BigNumberish };

export type RepayParamsStructOutput = [BigNumber, BigNumber] & {
  loanId: BigNumber;
  amount: BigNumber;
};

export type SelfLiquidateFixedLoanParamsStruct = { loanId: BigNumberish };

export type SelfLiquidateFixedLoanParamsStructOutput = [BigNumber] & {
  loanId: BigNumber;
};

export type UpdateConfigParamsStruct = { key: BytesLike; value: BigNumberish };

export type UpdateConfigParamsStructOutput = [string, BigNumber] & {
  key: string;
  value: BigNumber;
};

export type WithdrawParamsStruct = {
  token: string;
  amount: BigNumberish;
  to: string;
};

export type WithdrawParamsStructOutput = [string, BigNumber, string] & {
  token: string;
  amount: BigNumber;
  to: string;
};

export interface SizeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEEPER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "activeFixedLoans()": FunctionFragment;
    "borrowAsLimitOrder((uint256,(uint256[],uint256[],int256[])))": FunctionFragment;
    "borrowAsMarketOrder((address,uint256,uint256,bool,uint256[]))": FunctionFragment;
    "borrowerExit((uint256,address))": FunctionFragment;
    "claim((uint256))": FunctionFragment;
    "collateralRatio(address)": FunctionFragment;
    "compensate((uint256,uint256,uint256))": FunctionFragment;
    "deposit((address,uint256,address))": FunctionFragment;
    "fixedConfig()": FunctionFragment;
    "generalConfig()": FunctionFragment;
    "getCredit(uint256)": FunctionFragment;
    "getDebt(uint256)": FunctionFragment;
    "getFOLAssignedCollateral(uint256)": FunctionFragment;
    "getFixedLoan(uint256)": FunctionFragment;
    "getFixedLoanStatus(uint256)": FunctionFragment;
    "getFixedLoans()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserView(address)": FunctionFragment;
    "getVaultAddress(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize((address,address,address,address,address,address,address),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256))": FunctionFragment;
    "isFOL(uint256)": FunctionFragment;
    "isLoanLiquidatable(uint256)": FunctionFragment;
    "isUserLiquidatable(address)": FunctionFragment;
    "lendAsLimitOrder((uint256,(uint256[],uint256[],int256[])))": FunctionFragment;
    "lendAsMarketOrder((address,uint256,uint256,bool))": FunctionFragment;
    "liquidateFixedLoan((uint256,uint256))": FunctionFragment;
    "liquidateFixedLoanWithReplacement((uint256,address,uint256))": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "repay((uint256,uint256))": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "selfLiquidateFixedLoan((uint256))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokens()": FunctionFragment;
    "updateConfig((bytes32,uint256))": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "variableConfig()": FunctionFragment;
    "withdraw((address,uint256,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "KEEPER_ROLE"
      | "PAUSER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "activeFixedLoans"
      | "borrowAsLimitOrder"
      | "borrowAsMarketOrder"
      | "borrowerExit"
      | "claim"
      | "collateralRatio"
      | "compensate"
      | "deposit"
      | "fixedConfig"
      | "generalConfig"
      | "getCredit"
      | "getDebt"
      | "getFOLAssignedCollateral"
      | "getFixedLoan"
      | "getFixedLoanStatus"
      | "getFixedLoans"
      | "getRoleAdmin"
      | "getUserView"
      | "getVaultAddress"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isFOL"
      | "isLoanLiquidatable"
      | "isUserLiquidatable"
      | "lendAsLimitOrder"
      | "lendAsMarketOrder"
      | "liquidateFixedLoan"
      | "liquidateFixedLoanWithReplacement"
      | "multicall"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "repay"
      | "revokeRole"
      | "selfLiquidateFixedLoan"
      | "supportsInterface"
      | "tokens"
      | "updateConfig"
      | "upgradeToAndCall"
      | "variableConfig"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeFixedLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAsLimitOrder",
    values: [BorrowAsLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAsMarketOrder",
    values: [BorrowAsMarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerExit",
    values: [BorrowerExitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [ClaimParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compensate",
    values: [CompensateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generalConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFOLAssignedCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedLoanStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getUserView", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      InitializeGeneralParamsStruct,
      InitializeFixedParamsStruct,
      InitializeVariableParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "isFOL", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "isLoanLiquidatable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserLiquidatable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendAsLimitOrder",
    values: [LendAsLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lendAsMarketOrder",
    values: [LendAsMarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateFixedLoan",
    values: [LiquidateFixedLoanParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateFixedLoanWithReplacement",
    values: [LiquidateFixedLoanWithReplacementParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [RepayParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "selfLiquidateFixedLoan",
    values: [SelfLiquidateFixedLoanParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [UpdateConfigParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "variableConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeFixedLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAsLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAsMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compensate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFOLAssignedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedLoanStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLoanLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendAsLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendAsMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateFixedLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateFixedLoanWithReplacement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfLiquidateFixedLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint64)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Size extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SizeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    activeFixedLoans(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fixedConfig(
      overrides?: CallOverrides
    ): Promise<[InitializeFixedParamsStructOutput]>;

    generalConfig(
      overrides?: CallOverrides
    ): Promise<[InitializeGeneralParamsStructOutput]>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFixedLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[FixedLoanStructOutput]>;

    getFixedLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFixedLoans(
      overrides?: CallOverrides
    ): Promise<[FixedLoanStructOutput[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<[UserViewStructOutput]>;

    getVaultAddress(user: string, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      g: InitializeGeneralParamsStruct,
      f: InitializeFixedParamsStruct,
      v: InitializeVariableParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    isLoanLiquidatable(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateFixedLoan(
      params: LiquidateFixedLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateFixedLoanWithReplacement(
      params: LiquidateFixedLoanWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    selfLiquidateFixedLoan(
      params: SelfLiquidateFixedLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokens(overrides?: CallOverrides): Promise<[string, string, string]>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    variableConfig(
      overrides?: CallOverrides
    ): Promise<[InitializeVariableParamsStructOutput]>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  activeFixedLoans(overrides?: CallOverrides): Promise<BigNumber>;

  borrowAsLimitOrder(
    params: BorrowAsLimitOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowAsMarketOrder(
    params: BorrowAsMarketOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowerExit(
    params: BorrowerExitParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claim(
    params: ClaimParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collateralRatio(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  compensate(
    params: CompensateParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    params: DepositParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fixedConfig(
    overrides?: CallOverrides
  ): Promise<InitializeFixedParamsStructOutput>;

  generalConfig(
    overrides?: CallOverrides
  ): Promise<InitializeGeneralParamsStructOutput>;

  getCredit(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebt(loanId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getFOLAssignedCollateral(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFixedLoan(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<FixedLoanStructOutput>;

  getFixedLoanStatus(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getFixedLoans(overrides?: CallOverrides): Promise<FixedLoanStructOutput[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getUserView(
    user: string,
    overrides?: CallOverrides
  ): Promise<UserViewStructOutput>;

  getVaultAddress(user: string, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    g: InitializeGeneralParamsStruct,
    f: InitializeFixedParamsStruct,
    v: InitializeVariableParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isLoanLiquidatable(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserLiquidatable(user: string, overrides?: CallOverrides): Promise<boolean>;

  lendAsLimitOrder(
    params: LendAsLimitOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lendAsMarketOrder(
    params: LendAsMarketOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateFixedLoan(
    params: LiquidateFixedLoanParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateFixedLoanWithReplacement(
    params: LiquidateFixedLoanWithReplacementParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repay(
    params: RepayParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  selfLiquidateFixedLoan(
    params: SelfLiquidateFixedLoanParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokens(overrides?: CallOverrides): Promise<[string, string, string]>;

  updateConfig(
    params: UpdateConfigParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  variableConfig(
    overrides?: CallOverrides
  ): Promise<InitializeVariableParamsStructOutput>;

  withdraw(
    params: WithdrawParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    activeFixedLoans(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(params: ClaimParamsStruct, overrides?: CallOverrides): Promise<void>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      params: DepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fixedConfig(
      overrides?: CallOverrides
    ): Promise<InitializeFixedParamsStructOutput>;

    generalConfig(
      overrides?: CallOverrides
    ): Promise<InitializeGeneralParamsStructOutput>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<FixedLoanStructOutput>;

    getFixedLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getFixedLoans(overrides?: CallOverrides): Promise<FixedLoanStructOutput[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<UserViewStructOutput>;

    getVaultAddress(user: string, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      g: InitializeGeneralParamsStruct,
      f: InitializeFixedParamsStruct,
      v: InitializeVariableParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isLoanLiquidatable(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateFixedLoan(
      params: LiquidateFixedLoanParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateFixedLoanWithReplacement(
      params: LiquidateFixedLoanWithReplacementParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidatorProfitCollateralAsset: BigNumber;
        liquidatorProfitBorrowAsset: BigNumber;
      }
    >;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(params: RepayParamsStruct, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    selfLiquidateFixedLoan(
      params: SelfLiquidateFixedLoanParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokens(overrides?: CallOverrides): Promise<[string, string, string]>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    variableConfig(
      overrides?: CallOverrides
    ): Promise<InitializeVariableParamsStructOutput>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    activeFixedLoans(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fixedConfig(overrides?: CallOverrides): Promise<BigNumber>;

    generalConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedLoans(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserView(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVaultAddress(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      g: InitializeGeneralParamsStruct,
      f: InitializeFixedParamsStruct,
      v: InitializeVariableParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isLoanLiquidatable(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateFixedLoan(
      params: LiquidateFixedLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateFixedLoanWithReplacement(
      params: LiquidateFixedLoanWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    selfLiquidateFixedLoan(
      params: SelfLiquidateFixedLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    variableConfig(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeFixedLoans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fixedConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generalConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedLoans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultAddress(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      g: InitializeGeneralParamsStruct,
      f: InitializeFixedParamsStruct,
      v: InitializeVariableParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isFOL(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLoanLiquidatable(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateFixedLoan(
      params: LiquidateFixedLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateFixedLoanWithReplacement(
      params: LiquidateFixedLoanWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    selfLiquidateFixedLoan(
      params: SelfLiquidateFixedLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    variableConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
