/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type YieldCurveStruct = {
  maturities: BigNumberish[];
  rates: BigNumberish[];
  marketRateMultipliers: BigNumberish[];
};

export type YieldCurveStructOutput = [BigNumber[], BigNumber[], BigNumber[]] & {
  maturities: BigNumber[];
  rates: BigNumber[];
  marketRateMultipliers: BigNumber[];
};

export type BorrowAsLimitOrderParamsStruct = {
  openingLimitBorrowCR: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BorrowAsLimitOrderParamsStructOutput = [
  BigNumber,
  YieldCurveStructOutput
] & {
  openingLimitBorrowCR: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type BorrowAsMarketOrderParamsStruct = {
  lender: string;
  amount: BigNumberish;
  dueDate: BigNumberish;
  exactAmountIn: boolean;
  receivableCreditPositionIds: BigNumberish[];
};

export type BorrowAsMarketOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber[]
] & {
  lender: string;
  amount: BigNumber;
  dueDate: BigNumber;
  exactAmountIn: boolean;
  receivableCreditPositionIds: BigNumber[];
};

export type BorrowerExitParamsStruct = {
  debtPositionId: BigNumberish;
  borrowerToExitTo: string;
};

export type BorrowerExitParamsStructOutput = [BigNumber, string] & {
  debtPositionId: BigNumber;
  borrowerToExitTo: string;
};

export type ClaimParamsStruct = { creditPositionId: BigNumberish };

export type ClaimParamsStructOutput = [BigNumber] & {
  creditPositionId: BigNumber;
};

export type CompensateParamsStruct = {
  debtPositionToRepayId: BigNumberish;
  creditPositionToCompensateId: BigNumberish;
  amount: BigNumberish;
};

export type CompensateParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  debtPositionToRepayId: BigNumber;
  creditPositionToCompensateId: BigNumber;
  amount: BigNumber;
};

export type InitializeConfigParamsStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  minimumCreditBorrowAToken: BigNumberish;
  collateralSplitLiquidatorPercent: BigNumberish;
  collateralSplitProtocolPercent: BigNumberish;
  collateralTokenCap: BigNumberish;
  borrowATokenCap: BigNumberish;
  debtTokenCap: BigNumberish;
  repayFeeAPR: BigNumberish;
  earlyLenderExitFee: BigNumberish;
  earlyBorrowerExitFee: BigNumberish;
  collateralOverdueTransferFee: BigNumberish;
  feeRecipient: string;
};

export type InitializeConfigParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  crOpening: BigNumber;
  crLiquidation: BigNumber;
  minimumCreditBorrowAToken: BigNumber;
  collateralSplitLiquidatorPercent: BigNumber;
  collateralSplitProtocolPercent: BigNumber;
  collateralTokenCap: BigNumber;
  borrowATokenCap: BigNumber;
  debtTokenCap: BigNumber;
  repayFeeAPR: BigNumber;
  earlyLenderExitFee: BigNumber;
  earlyBorrowerExitFee: BigNumber;
  collateralOverdueTransferFee: BigNumber;
  feeRecipient: string;
};

export type DataViewStruct = {
  nextDebtPositionId: BigNumberish;
  nextCreditPositionId: BigNumberish;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  collateralToken: string;
  borrowAToken: string;
  debtToken: string;
};

export type DataViewStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  nextDebtPositionId: BigNumber;
  nextCreditPositionId: BigNumber;
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
  collateralToken: string;
  borrowAToken: string;
  debtToken: string;
};

export type DepositParamsStruct = {
  token: string;
  amount: BigNumberish;
  to: string;
};

export type DepositParamsStructOutput = [string, BigNumber, string] & {
  token: string;
  amount: BigNumber;
  to: string;
};

export type CreditPositionStruct = {
  lender: string;
  borrower: string;
  credit: BigNumberish;
  debtPositionId: BigNumberish;
};

export type CreditPositionStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber
] & {
  lender: string;
  borrower: string;
  credit: BigNumber;
  debtPositionId: BigNumber;
};

export type DebtPositionStruct = {
  lender: string;
  borrower: string;
  issuanceValue: BigNumberish;
  rate: BigNumberish;
  repayFeeAPR: BigNumberish;
  startDate: BigNumberish;
  dueDate: BigNumberish;
  liquidityIndexAtRepayment: BigNumberish;
};

export type DebtPositionStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  lender: string;
  borrower: string;
  issuanceValue: BigNumber;
  rate: BigNumber;
  repayFeeAPR: BigNumber;
  startDate: BigNumber;
  dueDate: BigNumber;
  liquidityIndexAtRepayment: BigNumber;
};

export type LoanOfferStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type LoanOfferStructOutput = [BigNumber, YieldCurveStructOutput] & {
  maxDueDate: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type BorrowOfferStruct = {
  openingLimitBorrowCR: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BorrowOfferStructOutput = [BigNumber, YieldCurveStructOutput] & {
  openingLimitBorrowCR: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type UserStruct = {
  loanOffer: LoanOfferStruct;
  borrowOffer: BorrowOfferStruct;
  vault: string;
};

export type UserStructOutput = [
  LoanOfferStructOutput,
  BorrowOfferStructOutput,
  string
] & {
  loanOffer: LoanOfferStructOutput;
  borrowOffer: BorrowOfferStructOutput;
  vault: string;
};

export type UserViewStruct = {
  user: UserStruct;
  account: string;
  collateralAmount: BigNumberish;
  borrowAmount: BigNumberish;
  debtAmount: BigNumberish;
};

export type UserViewStructOutput = [
  UserStructOutput,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  user: UserStructOutput;
  account: string;
  collateralAmount: BigNumber;
  borrowAmount: BigNumber;
  debtAmount: BigNumber;
};

export type InitializeOracleParamsStruct = {
  priceFeed: string;
  marketBorrowRateFeed: string;
};

export type InitializeOracleParamsStructOutput = [string, string] & {
  priceFeed: string;
  marketBorrowRateFeed: string;
};

export type InitializeDataParamsStruct = {
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
};

export type InitializeDataParamsStructOutput = [string, string, string] & {
  underlyingCollateralToken: string;
  underlyingBorrowToken: string;
  variablePool: string;
};

export type LendAsLimitOrderParamsStruct = {
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type LendAsLimitOrderParamsStructOutput = [
  BigNumber,
  YieldCurveStructOutput
] & { maxDueDate: BigNumber; curveRelativeTime: YieldCurveStructOutput };

export type LendAsMarketOrderParamsStruct = {
  borrower: string;
  dueDate: BigNumberish;
  amount: BigNumberish;
  exactAmountIn: boolean;
};

export type LendAsMarketOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  borrower: string;
  dueDate: BigNumber;
  amount: BigNumber;
  exactAmountIn: boolean;
};

export type LiquidateParamsStruct = {
  debtPositionId: BigNumberish;
  minimumCollateralProfit: BigNumberish;
};

export type LiquidateParamsStructOutput = [BigNumber, BigNumber] & {
  debtPositionId: BigNumber;
  minimumCollateralProfit: BigNumber;
};

export type LiquidateWithReplacementParamsStruct = {
  debtPositionId: BigNumberish;
  borrower: string;
  minimumCollateralProfit: BigNumberish;
};

export type LiquidateWithReplacementParamsStructOutput = [
  BigNumber,
  string,
  BigNumber
] & {
  debtPositionId: BigNumber;
  borrower: string;
  minimumCollateralProfit: BigNumber;
};

export type RepayParamsStruct = { debtPositionId: BigNumberish };

export type RepayParamsStructOutput = [BigNumber] & {
  debtPositionId: BigNumber;
};

export type SelfLiquidateParamsStruct = { creditPositionId: BigNumberish };

export type SelfLiquidateParamsStructOutput = [BigNumber] & {
  creditPositionId: BigNumber;
};

export type UpdateConfigParamsStruct = { key: BytesLike; value: BigNumberish };

export type UpdateConfigParamsStructOutput = [string, BigNumber] & {
  key: string;
  value: BigNumber;
};

export type WithdrawParamsStruct = {
  token: string;
  amount: BigNumberish;
  to: string;
};

export type WithdrawParamsStructOutput = [string, BigNumber, string] & {
  token: string;
  amount: BigNumber;
  to: string;
};

export interface SizeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEEPER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "borrowAsLimitOrder((uint256,(uint256[],int256[],int256[])))": FunctionFragment;
    "borrowAsMarketOrder((address,uint256,uint256,bool,uint256[]))": FunctionFragment;
    "borrowerExit((uint256,address))": FunctionFragment;
    "claim((uint256))": FunctionFragment;
    "collateralRatio(address)": FunctionFragment;
    "compensate((uint256,uint256,uint256))": FunctionFragment;
    "config()": FunctionFragment;
    "data()": FunctionFragment;
    "deposit((address,uint256,address))": FunctionFragment;
    "faceValue(uint256)": FunctionFragment;
    "faceValueInCollateralToken(uint256)": FunctionFragment;
    "getCredit(uint256)": FunctionFragment;
    "getCreditPosition(uint256)": FunctionFragment;
    "getCreditPositionIdsByDebtPositionId(uint256)": FunctionFragment;
    "getCreditPositions()": FunctionFragment;
    "getCreditPositions(uint256[])": FunctionFragment;
    "getCreditPositionsByDebtPositionId(uint256)": FunctionFragment;
    "getDebt(uint256)": FunctionFragment;
    "getDebtPosition(uint256)": FunctionFragment;
    "getDebtPositionAssignedCollateral(uint256)": FunctionFragment;
    "getDebtPositions()": FunctionFragment;
    "getDebtPositions(uint256[])": FunctionFragment;
    "getDueDate(uint256)": FunctionFragment;
    "getLoanStatus(uint256)": FunctionFragment;
    "getPositionsCount()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserView(address)": FunctionFragment;
    "getVaultAddress(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address),(address,address),(address,address,address))": FunctionFragment;
    "isCreditPositionId(uint256)": FunctionFragment;
    "isDebtPositionId(uint256)": FunctionFragment;
    "isDebtPositionLiquidatable(uint256)": FunctionFragment;
    "isUserLiquidatable(address)": FunctionFragment;
    "lendAsLimitOrder((uint256,(uint256[],int256[],int256[])))": FunctionFragment;
    "lendAsMarketOrder((address,uint256,uint256,bool))": FunctionFragment;
    "liquidate((uint256,uint256))": FunctionFragment;
    "liquidateWithReplacement((uint256,address,uint256))": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "oracle()": FunctionFragment;
    "partialRepayFee(uint256,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "repay((uint256))": FunctionFragment;
    "repayFee(uint256,uint256,uint256,uint256)": FunctionFragment;
    "repayFee(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "selfLiquidate((uint256))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateConfig((bytes32,uint256))": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw((address,uint256,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "KEEPER_ROLE"
      | "PAUSER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "borrowAsLimitOrder"
      | "borrowAsMarketOrder"
      | "borrowerExit"
      | "claim"
      | "collateralRatio"
      | "compensate"
      | "config"
      | "data"
      | "deposit"
      | "faceValue"
      | "faceValueInCollateralToken"
      | "getCredit"
      | "getCreditPosition"
      | "getCreditPositionIdsByDebtPositionId"
      | "getCreditPositions()"
      | "getCreditPositions(uint256[])"
      | "getCreditPositionsByDebtPositionId"
      | "getDebt"
      | "getDebtPosition"
      | "getDebtPositionAssignedCollateral"
      | "getDebtPositions()"
      | "getDebtPositions(uint256[])"
      | "getDueDate"
      | "getLoanStatus"
      | "getPositionsCount"
      | "getRoleAdmin"
      | "getUserView"
      | "getVaultAddress"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isCreditPositionId"
      | "isDebtPositionId"
      | "isDebtPositionLiquidatable"
      | "isUserLiquidatable"
      | "lendAsLimitOrder"
      | "lendAsMarketOrder"
      | "liquidate"
      | "liquidateWithReplacement"
      | "multicall"
      | "oracle"
      | "partialRepayFee"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "repay"
      | "repayFee(uint256,uint256,uint256,uint256)"
      | "repayFee(uint256)"
      | "revokeRole"
      | "selfLiquidate"
      | "supportsInterface"
      | "unpause"
      | "updateConfig"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEEPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAsLimitOrder",
    values: [BorrowAsLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAsMarketOrder",
    values: [BorrowAsMarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerExit",
    values: [BorrowerExitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [ClaimParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compensate",
    values: [CompensateParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "faceValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "faceValueInCollateralToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPositionIdsByDebtPositionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPositions()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPositions(uint256[])",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPositionsByDebtPositionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPositionAssignedCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPositions()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtPositions(uint256[])",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDueDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getUserView", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      InitializeConfigParamsStruct,
      InitializeOracleParamsStruct,
      InitializeDataParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditPositionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDebtPositionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDebtPositionLiquidatable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserLiquidatable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendAsLimitOrder",
    values: [LendAsLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lendAsMarketOrder",
    values: [LendAsMarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [LiquidateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateWithReplacement",
    values: [LiquidateWithReplacementParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialRepayFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [RepayParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFee(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFee(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "selfLiquidate",
    values: [SelfLiquidateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [UpdateConfigParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEEPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAsLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAsMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compensate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "faceValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "faceValueInCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPositionIdsByDebtPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPositions()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPositions(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPositionsByDebtPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPositionAssignedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPositions()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtPositions(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDueDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoanStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCreditPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDebtPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDebtPositionLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendAsLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendAsMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateWithReplacement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialRepayFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayFee(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint64)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Size extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SizeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    config(
      overrides?: CallOverrides
    ): Promise<[InitializeConfigParamsStructOutput]>;

    data(overrides?: CallOverrides): Promise<[DataViewStructOutput]>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    faceValue(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    faceValueInCollateralToken(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCredit(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[CreditPositionStructOutput]>;

    getCreditPositionIdsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { creditPositionIds: BigNumber[] }>;

    "getCreditPositions()"(
      overrides?: CallOverrides
    ): Promise<
      [CreditPositionStructOutput[]] & {
        creditPositions: CreditPositionStructOutput[];
      }
    >;

    "getCreditPositions(uint256[])"(
      creditPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [CreditPositionStructOutput[]] & {
        creditPositions: CreditPositionStructOutput[];
      }
    >;

    getCreditPositionsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [CreditPositionStructOutput[]] & {
        creditPositions: CreditPositionStructOutput[];
      }
    >;

    getDebt(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DebtPositionStructOutput]>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDebtPositions()"(
      overrides?: CallOverrides
    ): Promise<
      [DebtPositionStructOutput[]] & {
        debtPositions: DebtPositionStructOutput[];
      }
    >;

    "getDebtPositions(uint256[])"(
      debtPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [DebtPositionStructOutput[]] & {
        debtPositions: DebtPositionStructOutput[];
      }
    >;

    getDueDate(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPositionsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<[UserViewStructOutput]>;

    getVaultAddress(user: string, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      owner: string,
      c: InitializeConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    oracle(
      overrides?: CallOverrides
    ): Promise<[InitializeOracleParamsStructOutput]>;

    partialRepayFee(
      debtPositionId: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "repayFee(uint256,uint256,uint256,uint256)"(
      issuanceValue: BigNumberish,
      startDate: BigNumberish,
      dueDate: BigNumberish,
      repayFeeAPR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "repayFee(uint256)"(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  borrowAsLimitOrder(
    params: BorrowAsLimitOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowAsMarketOrder(
    params: BorrowAsMarketOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowerExit(
    params: BorrowerExitParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claim(
    params: ClaimParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collateralRatio(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  compensate(
    params: CompensateParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  config(
    overrides?: CallOverrides
  ): Promise<InitializeConfigParamsStructOutput>;

  data(overrides?: CallOverrides): Promise<DataViewStructOutput>;

  deposit(
    params: DepositParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  faceValue(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  faceValueInCollateralToken(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCredit(
    creditPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCreditPosition(
    creditPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CreditPositionStructOutput>;

  getCreditPositionIdsByDebtPositionId(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getCreditPositions()"(
    overrides?: CallOverrides
  ): Promise<CreditPositionStructOutput[]>;

  "getCreditPositions(uint256[])"(
    creditPositionIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<CreditPositionStructOutput[]>;

  getCreditPositionsByDebtPositionId(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<CreditPositionStructOutput[]>;

  getDebt(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebtPosition(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DebtPositionStructOutput>;

  getDebtPositionAssignedCollateral(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDebtPositions()"(
    overrides?: CallOverrides
  ): Promise<DebtPositionStructOutput[]>;

  "getDebtPositions(uint256[])"(
    debtPositionIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<DebtPositionStructOutput[]>;

  getDueDate(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanStatus(
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getPositionsCount(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getUserView(
    user: string,
    overrides?: CallOverrides
  ): Promise<UserViewStructOutput>;

  getVaultAddress(user: string, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    owner: string,
    c: InitializeConfigParamsStruct,
    o: InitializeOracleParamsStruct,
    d: InitializeDataParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isCreditPositionId(
    creditPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDebtPositionId(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDebtPositionLiquidatable(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserLiquidatable(user: string, overrides?: CallOverrides): Promise<boolean>;

  lendAsLimitOrder(
    params: LendAsLimitOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lendAsMarketOrder(
    params: LendAsMarketOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidate(
    params: LiquidateParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateWithReplacement(
    params: LiquidateWithReplacementParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  oracle(
    overrides?: CallOverrides
  ): Promise<InitializeOracleParamsStructOutput>;

  partialRepayFee(
    debtPositionId: BigNumberish,
    repayAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repay(
    params: RepayParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "repayFee(uint256,uint256,uint256,uint256)"(
    issuanceValue: BigNumberish,
    startDate: BigNumberish,
    dueDate: BigNumberish,
    repayFeeAPR: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "repayFee(uint256)"(
    debtPositionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  selfLiquidate(
    params: SelfLiquidateParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConfig(
    params: UpdateConfigParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    params: WithdrawParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(params: ClaimParamsStruct, overrides?: CallOverrides): Promise<void>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    config(
      overrides?: CallOverrides
    ): Promise<InitializeConfigParamsStructOutput>;

    data(overrides?: CallOverrides): Promise<DataViewStructOutput>;

    deposit(
      params: DepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    faceValue(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    faceValueInCollateralToken(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCredit(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CreditPositionStructOutput>;

    getCreditPositionIdsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getCreditPositions()"(
      overrides?: CallOverrides
    ): Promise<CreditPositionStructOutput[]>;

    "getCreditPositions(uint256[])"(
      creditPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<CreditPositionStructOutput[]>;

    getCreditPositionsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CreditPositionStructOutput[]>;

    getDebt(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DebtPositionStructOutput>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDebtPositions()"(
      overrides?: CallOverrides
    ): Promise<DebtPositionStructOutput[]>;

    "getDebtPositions(uint256[])"(
      debtPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<DebtPositionStructOutput[]>;

    getDueDate(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getPositionsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<UserViewStructOutput>;

    getVaultAddress(user: string, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      owner: string,
      c: InitializeConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidatorProfitCollateralAsset: BigNumber;
        liquidatorProfitBorrowAsset: BigNumber;
      }
    >;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    oracle(
      overrides?: CallOverrides
    ): Promise<InitializeOracleParamsStructOutput>;

    partialRepayFee(
      debtPositionId: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(params: RepayParamsStruct, overrides?: CallOverrides): Promise<void>;

    "repayFee(uint256,uint256,uint256,uint256)"(
      issuanceValue: BigNumberish,
      startDate: BigNumberish,
      dueDate: BigNumberish,
      repayFeeAPR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayFee(uint256)"(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    faceValue(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    faceValueInCollateralToken(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCredit(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditPositionIdsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreditPositions()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getCreditPositions(uint256[])"(
      creditPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreditPositionsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDebtPositions()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtPositions(uint256[])"(
      debtPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDueDate(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserView(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVaultAddress(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      c: InitializeConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    partialRepayFee(
      debtPositionId: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "repayFee(uint256,uint256,uint256,uint256)"(
      issuanceValue: BigNumberish,
      startDate: BigNumberish,
      dueDate: BigNumberish,
      repayFeeAPR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayFee(uint256)"(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    faceValue(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faceValueInCollateralToken(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCredit(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditPosition(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditPositionIdsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditPositions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreditPositions(uint256[])"(
      creditPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditPositionsByDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebt(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtPosition(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtPositionAssignedCollateral(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDebtPositions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDebtPositions(uint256[])"(
      debtPositionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDueDate(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanStatus(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultAddress(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      c: InitializeConfigParamsStruct,
      o: InitializeOracleParamsStruct,
      d: InitializeDataParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isCreditPositionId(
      creditPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDebtPositionId(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDebtPositionLiquidatable(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserLiquidatable(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidate(
      params: LiquidateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateWithReplacement(
      params: LiquidateWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialRepayFee(
      debtPositionId: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "repayFee(uint256,uint256,uint256,uint256)"(
      issuanceValue: BigNumberish,
      startDate: BigNumberish,
      dueDate: BigNumberish,
      repayFeeAPR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "repayFee(uint256)"(
      debtPositionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    selfLiquidate(
      params: SelfLiquidateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
