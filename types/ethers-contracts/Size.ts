/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type YieldCurveStruct = {
  timeBuckets: BigNumberish[];
  rates: BigNumberish[];
};

export type YieldCurveStructOutput = [BigNumber[], BigNumber[]] & {
  timeBuckets: BigNumber[];
  rates: BigNumber[];
};

export type BorrowAsLimitOrderParamsStruct = {
  maxAmount: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BorrowAsLimitOrderParamsStructOutput = [
  BigNumber,
  YieldCurveStructOutput
] & { maxAmount: BigNumber; curveRelativeTime: YieldCurveStructOutput };

export type BorrowAsMarketOrderParamsStruct = {
  lender: string;
  amount: BigNumberish;
  dueDate: BigNumberish;
  exactAmountIn: boolean;
  virtualCollateralLoanIds: BigNumberish[];
};

export type BorrowAsMarketOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber[]
] & {
  lender: string;
  amount: BigNumber;
  dueDate: BigNumber;
  exactAmountIn: boolean;
  virtualCollateralLoanIds: BigNumber[];
};

export type BorrowerExitParamsStruct = {
  loanId: BigNumberish;
  borrowerToExitTo: string;
};

export type BorrowerExitParamsStructOutput = [BigNumber, string] & {
  loanId: BigNumber;
  borrowerToExitTo: string;
};

export type ClaimParamsStruct = { loanId: BigNumberish };

export type ClaimParamsStructOutput = [BigNumber] & { loanId: BigNumber };

export type CompensateParamsStruct = {
  loanToRepayId: BigNumberish;
  loanToCompensateId: BigNumberish;
  amount: BigNumberish;
};

export type CompensateParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  loanToRepayId: BigNumber;
  loanToCompensateId: BigNumber;
  amount: BigNumber;
};

export type DepositParamsStruct = { token: string; amount: BigNumberish };

export type DepositParamsStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export type BorrowOfferStruct = {
  maxAmount: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type BorrowOfferStructOutput = [BigNumber, YieldCurveStructOutput] & {
  maxAmount: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type ConfigStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  collateralPercentagePremiumToLiquidator: BigNumberish;
  collateralPercentagePremiumToProtocol: BigNumberish;
  minimumCredit: BigNumberish;
  priceFeed: string;
  variablePool: string;
  insurance: string;
  feeRecipient: string;
};

export type ConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string
] & {
  crOpening: BigNumber;
  crLiquidation: BigNumber;
  collateralPercentagePremiumToLiquidator: BigNumber;
  collateralPercentagePremiumToProtocol: BigNumber;
  minimumCredit: BigNumber;
  priceFeed: string;
  variablePool: string;
  insurance: string;
  feeRecipient: string;
};

export type LoanStruct = {
  faceValue: BigNumberish;
  faceValueExited: BigNumberish;
  lender: string;
  borrower: string;
  dueDate: BigNumberish;
  repaid: boolean;
  folId: BigNumberish;
};

export type LoanStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  boolean,
  BigNumber
] & {
  faceValue: BigNumber;
  faceValueExited: BigNumber;
  lender: string;
  borrower: string;
  dueDate: BigNumber;
  repaid: boolean;
  folId: BigNumber;
};

export type LoanOfferStruct = {
  maxAmount: BigNumberish;
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type LoanOfferStructOutput = [
  BigNumber,
  BigNumber,
  YieldCurveStructOutput
] & {
  maxAmount: BigNumber;
  maxDueDate: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type UserStruct = {
  loanOffer: LoanOfferStruct;
  borrowOffer: BorrowOfferStruct;
};

export type UserStructOutput = [
  LoanOfferStructOutput,
  BorrowOfferStructOutput
] & { loanOffer: LoanOfferStructOutput; borrowOffer: BorrowOfferStructOutput };

export type UserViewStruct = {
  user: UserStruct;
  collateralAmount: BigNumberish;
  borrowAmount: BigNumberish;
  debtAmount: BigNumberish;
};

export type UserViewStructOutput = [
  UserStructOutput,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  user: UserStructOutput;
  collateralAmount: BigNumber;
  borrowAmount: BigNumber;
  debtAmount: BigNumber;
};

export type InitializeParamsStruct = {
  owner: string;
  priceFeed: string;
  collateralAsset: string;
  borrowAsset: string;
  collateralToken: string;
  borrowToken: string;
  debtToken: string;
  protocolVault: string;
  feeRecipient: string;
};

export type InitializeParamsStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  owner: string;
  priceFeed: string;
  collateralAsset: string;
  borrowAsset: string;
  collateralToken: string;
  borrowToken: string;
  debtToken: string;
  protocolVault: string;
  feeRecipient: string;
};

export type InitializeExtraParamsStruct = {
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  collateralPercentagePremiumToLiquidator: BigNumberish;
  collateralPercentagePremiumToProtocol: BigNumberish;
  minimumCredit: BigNumberish;
};

export type InitializeExtraParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  crOpening: BigNumber;
  crLiquidation: BigNumber;
  collateralPercentagePremiumToLiquidator: BigNumber;
  collateralPercentagePremiumToProtocol: BigNumber;
  minimumCredit: BigNumber;
};

export type LendAsLimitOrderParamsStruct = {
  maxAmount: BigNumberish;
  maxDueDate: BigNumberish;
  curveRelativeTime: YieldCurveStruct;
};

export type LendAsLimitOrderParamsStructOutput = [
  BigNumber,
  BigNumber,
  YieldCurveStructOutput
] & {
  maxAmount: BigNumber;
  maxDueDate: BigNumber;
  curveRelativeTime: YieldCurveStructOutput;
};

export type LendAsMarketOrderParamsStruct = {
  borrower: string;
  dueDate: BigNumberish;
  amount: BigNumberish;
  exactAmountIn: boolean;
};

export type LendAsMarketOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  borrower: string;
  dueDate: BigNumber;
  amount: BigNumber;
  exactAmountIn: boolean;
};

export type LiquidateLoanParamsStruct = {
  loanId: BigNumberish;
  minimumCollateralRatio: BigNumberish;
};

export type LiquidateLoanParamsStructOutput = [BigNumber, BigNumber] & {
  loanId: BigNumber;
  minimumCollateralRatio: BigNumber;
};

export type LiquidateLoanWithReplacementParamsStruct = {
  loanId: BigNumberish;
  borrower: string;
  minimumCollateralRatio: BigNumberish;
};

export type LiquidateLoanWithReplacementParamsStructOutput = [
  BigNumber,
  string,
  BigNumber
] & { loanId: BigNumber; borrower: string; minimumCollateralRatio: BigNumber };

export type MoveToVariablePoolParamsStruct = { loanId: BigNumberish };

export type MoveToVariablePoolParamsStructOutput = [BigNumber] & {
  loanId: BigNumber;
};

export type RepayParamsStruct = { loanId: BigNumberish; amount: BigNumberish };

export type RepayParamsStructOutput = [BigNumber, BigNumber] & {
  loanId: BigNumber;
  amount: BigNumber;
};

export type SelfLiquidateLoanParamsStruct = { loanId: BigNumberish };

export type SelfLiquidateLoanParamsStructOutput = [BigNumber] & {
  loanId: BigNumber;
};

export type TokensStruct = {
  collateralAsset: string;
  borrowAsset: string;
  collateralToken: string;
  borrowToken: string;
  debtToken: string;
};

export type TokensStructOutput = [string, string, string, string, string] & {
  collateralAsset: string;
  borrowAsset: string;
  collateralToken: string;
  borrowToken: string;
  debtToken: string;
};

export type UpdateConfigParamsStruct = {
  priceFeed: string;
  feeRecipient: string;
  crOpening: BigNumberish;
  crLiquidation: BigNumberish;
  collateralPercentagePremiumToLiquidator: BigNumberish;
  collateralPercentagePremiumToProtocol: BigNumberish;
  minimumCredit: BigNumberish;
};

export type UpdateConfigParamsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  priceFeed: string;
  feeRecipient: string;
  crOpening: BigNumber;
  crLiquidation: BigNumber;
  collateralPercentagePremiumToLiquidator: BigNumber;
  collateralPercentagePremiumToProtocol: BigNumber;
  minimumCredit: BigNumber;
};

export type WithdrawParamsStruct = { token: string; amount: BigNumberish };

export type WithdrawParamsStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export interface SizeInterface extends utils.Interface {
  functions: {
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "activeLoans()": FunctionFragment;
    "activeVariableLoans()": FunctionFragment;
    "borrowAsLimitOrder((uint256,(uint256[],uint256[])))": FunctionFragment;
    "borrowAsMarketOrder((address,uint256,uint256,bool,uint256[]))": FunctionFragment;
    "borrowerExit((uint256,address))": FunctionFragment;
    "claim((uint256))": FunctionFragment;
    "collateralPercentagePremiumToBorrower()": FunctionFragment;
    "collateralPercentagePremiumToLiquidator()": FunctionFragment;
    "collateralPercentagePremiumToProtocol()": FunctionFragment;
    "collateralRatio(address)": FunctionFragment;
    "compensate((uint256,uint256,uint256))": FunctionFragment;
    "crLiquidation()": FunctionFragment;
    "crOpening()": FunctionFragment;
    "deposit((address,uint256))": FunctionFragment;
    "getBorrowOffer(address)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getCredit(uint256)": FunctionFragment;
    "getDebt(uint256)": FunctionFragment;
    "getDueDate(uint256)": FunctionFragment;
    "getFOLAssignedCollateral(uint256)": FunctionFragment;
    "getFeeRecipient()": FunctionFragment;
    "getLoan(uint256)": FunctionFragment;
    "getLoanOffer(address)": FunctionFragment;
    "getLoanStatus(uint256)": FunctionFragment;
    "getProtocolVault()": FunctionFragment;
    "getUserView(address)": FunctionFragment;
    "initialize((address,address,address,address,address,address,address,address,address),(uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "isFOL(uint256)": FunctionFragment;
    "isLiquidatable(address)": FunctionFragment;
    "isLiquidatable(uint256)": FunctionFragment;
    "lendAsLimitOrder((uint256,uint256,(uint256[],uint256[])))": FunctionFragment;
    "lendAsMarketOrder((address,uint256,uint256,bool))": FunctionFragment;
    "liquidateLoan((uint256,uint256))": FunctionFragment;
    "liquidateLoanWithReplacement((uint256,address,uint256))": FunctionFragment;
    "minimumCredit()": FunctionFragment;
    "moveToVariablePool((uint256))": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay((uint256,uint256))": FunctionFragment;
    "selfLiquidateLoan((uint256))": FunctionFragment;
    "state()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateConfig((address,address,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw((address,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "activeLoans"
      | "activeVariableLoans"
      | "borrowAsLimitOrder"
      | "borrowAsMarketOrder"
      | "borrowerExit"
      | "claim"
      | "collateralPercentagePremiumToBorrower"
      | "collateralPercentagePremiumToLiquidator"
      | "collateralPercentagePremiumToProtocol"
      | "collateralRatio"
      | "compensate"
      | "crLiquidation"
      | "crOpening"
      | "deposit"
      | "getBorrowOffer"
      | "getConfig"
      | "getCredit"
      | "getDebt"
      | "getDueDate"
      | "getFOLAssignedCollateral"
      | "getFeeRecipient"
      | "getLoan"
      | "getLoanOffer"
      | "getLoanStatus"
      | "getProtocolVault"
      | "getUserView"
      | "initialize"
      | "isFOL"
      | "isLiquidatable(address)"
      | "isLiquidatable(uint256)"
      | "lendAsLimitOrder"
      | "lendAsMarketOrder"
      | "liquidateLoan"
      | "liquidateLoanWithReplacement"
      | "minimumCredit"
      | "moveToVariablePool"
      | "multicall"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "repay"
      | "selfLiquidateLoan"
      | "state"
      | "transferOwnership"
      | "updateConfig"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeVariableLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAsLimitOrder",
    values: [BorrowAsLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAsMarketOrder",
    values: [BorrowAsMarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerExit",
    values: [BorrowerExitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [ClaimParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPercentagePremiumToBorrower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPercentagePremiumToLiquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPercentagePremiumToProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compensate",
    values: [CompensateParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "crLiquidation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crOpening", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowOffer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDueDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFOLAssignedCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanOffer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUserView", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [InitializeParamsStruct, InitializeExtraParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "isFOL", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lendAsLimitOrder",
    values: [LendAsLimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lendAsMarketOrder",
    values: [LendAsMarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [LiquidateLoanParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoanWithReplacement",
    values: [LiquidateLoanWithReplacementParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCredit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveToVariablePool",
    values: [MoveToVariablePoolParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [RepayParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "selfLiquidateLoan",
    values: [SelfLiquidateLoanParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [UpdateConfigParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeVariableLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAsLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAsMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralPercentagePremiumToBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPercentagePremiumToLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPercentagePremiumToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compensate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crOpening", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCredit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDueDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFOLAssignedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoanOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendAsLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendAsMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoanWithReplacement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveToVariablePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfLiquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint64)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Size extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SizeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activeLoans(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeVariableLoans(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collateralPercentagePremiumToBorrower(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralPercentagePremiumToLiquidator(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralPercentagePremiumToProtocol(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    crLiquidation(overrides?: CallOverrides): Promise<[BigNumber]>;

    crOpening(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBorrowOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BorrowOfferStructOutput]>;

    getConfig(overrides?: CallOverrides): Promise<[ConfigStructOutput]>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDueDate(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeRecipient(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LoanStructOutput]>;

    getLoanOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<[LoanOfferStructOutput]>;

    getLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getProtocolVault(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<[UserViewStructOutput]>;

    initialize(
      params: InitializeParamsStruct,
      extraParams: InitializeExtraParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "isLiquidatable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLiquidatable(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateLoan(
      params: LiquidateLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateLoanWithReplacement(
      params: LiquidateLoanWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    minimumCredit(overrides?: CallOverrides): Promise<[BigNumber]>;

    moveToVariablePool(
      params: MoveToVariablePoolParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    selfLiquidateLoan(
      params: SelfLiquidateLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    state(
      overrides?: CallOverrides
    ): Promise<
      [TokensStructOutput, ConfigStructOutput] & {
        tokens: TokensStructOutput;
        config: ConfigStructOutput;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activeLoans(overrides?: CallOverrides): Promise<BigNumber>;

  activeVariableLoans(overrides?: CallOverrides): Promise<BigNumber>;

  borrowAsLimitOrder(
    params: BorrowAsLimitOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowAsMarketOrder(
    params: BorrowAsMarketOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowerExit(
    params: BorrowerExitParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claim(
    params: ClaimParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collateralPercentagePremiumToBorrower(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralPercentagePremiumToLiquidator(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralPercentagePremiumToProtocol(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralRatio(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  compensate(
    params: CompensateParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  crLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

  crOpening(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    params: DepositParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBorrowOffer(
    account: string,
    overrides?: CallOverrides
  ): Promise<BorrowOfferStructOutput>;

  getConfig(overrides?: CallOverrides): Promise<ConfigStructOutput>;

  getCredit(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebt(loanId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getDueDate(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFOLAssignedCollateral(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeRecipient(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getLoan(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LoanStructOutput>;

  getLoanOffer(
    account: string,
    overrides?: CallOverrides
  ): Promise<LoanOfferStructOutput>;

  getLoanStatus(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getProtocolVault(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getUserView(
    user: string,
    overrides?: CallOverrides
  ): Promise<UserViewStructOutput>;

  initialize(
    params: InitializeParamsStruct,
    extraParams: InitializeExtraParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isLiquidatable(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLiquidatable(uint256)"(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lendAsLimitOrder(
    params: LendAsLimitOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lendAsMarketOrder(
    params: LendAsMarketOrderParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateLoan(
    params: LiquidateLoanParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateLoanWithReplacement(
    params: LiquidateLoanWithReplacementParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  minimumCredit(overrides?: CallOverrides): Promise<BigNumber>;

  moveToVariablePool(
    params: MoveToVariablePoolParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repay(
    params: RepayParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  selfLiquidateLoan(
    params: SelfLiquidateLoanParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  state(
    overrides?: CallOverrides
  ): Promise<
    [TokensStructOutput, ConfigStructOutput] & {
      tokens: TokensStructOutput;
      config: ConfigStructOutput;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConfig(
    params: UpdateConfigParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    params: WithdrawParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    activeLoans(overrides?: CallOverrides): Promise<BigNumber>;

    activeVariableLoans(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(params: ClaimParamsStruct, overrides?: CallOverrides): Promise<void>;

    collateralPercentagePremiumToBorrower(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPercentagePremiumToLiquidator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPercentagePremiumToProtocol(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    crLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

    crOpening(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      params: DepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getBorrowOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<BorrowOfferStructOutput>;

    getConfig(overrides?: CallOverrides): Promise<ConfigStructOutput>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDueDate(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRecipient(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LoanStructOutput>;

    getLoanOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<LoanOfferStructOutput>;

    getLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getProtocolVault(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<UserViewStructOutput>;

    initialize(
      params: InitializeParamsStruct,
      extraParams: InitializeExtraParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isLiquidatable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLiquidatable(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateLoan(
      params: LiquidateLoanParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateLoanWithReplacement(
      params: LiquidateLoanWithReplacementParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidatorProfitCollateralAsset: BigNumber;
        liquidatorProfitBorrowAsset: BigNumber;
      }
    >;

    minimumCredit(overrides?: CallOverrides): Promise<BigNumber>;

    moveToVariablePool(
      params: MoveToVariablePoolParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(params: RepayParamsStruct, overrides?: CallOverrides): Promise<void>;

    selfLiquidateLoan(
      params: SelfLiquidateLoanParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    state(
      overrides?: CallOverrides
    ): Promise<
      [TokensStructOutput, ConfigStructOutput] & {
        tokens: TokensStructOutput;
        config: ConfigStructOutput;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activeLoans(overrides?: CallOverrides): Promise<BigNumber>;

    activeVariableLoans(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collateralPercentagePremiumToBorrower(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPercentagePremiumToLiquidator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPercentagePremiumToProtocol(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    crLiquidation(overrides?: CallOverrides): Promise<BigNumber>;

    crOpening(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBorrowOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDueDate(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolVault(overrides?: CallOverrides): Promise<BigNumber>;

    getUserView(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: InitializeParamsStruct,
      extraParams: InitializeExtraParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isFOL(loanId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "isLiquidatable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLiquidatable(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateLoan(
      params: LiquidateLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateLoanWithReplacement(
      params: LiquidateLoanWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    minimumCredit(overrides?: CallOverrides): Promise<BigNumber>;

    moveToVariablePool(
      params: MoveToVariablePoolParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    selfLiquidateLoan(
      params: SelfLiquidateLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activeLoans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeVariableLoans(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowAsLimitOrder(
      params: BorrowAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowAsMarketOrder(
      params: BorrowAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowerExit(
      params: BorrowerExitParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claim(
      params: ClaimParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collateralPercentagePremiumToBorrower(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPercentagePremiumToLiquidator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPercentagePremiumToProtocol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralRatio(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compensate(
      params: CompensateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    crLiquidation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crOpening(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      params: DepositParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBorrowOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCredit(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebt(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDueDate(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFOLAssignedCollateral(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanOffer(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanStatus(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserView(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      params: InitializeParamsStruct,
      extraParams: InitializeExtraParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isFOL(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidatable(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidatable(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendAsLimitOrder(
      params: LendAsLimitOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lendAsMarketOrder(
      params: LendAsMarketOrderParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateLoan(
      params: LiquidateLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateLoanWithReplacement(
      params: LiquidateLoanWithReplacementParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    minimumCredit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveToVariablePool(
      params: MoveToVariablePoolParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repay(
      params: RepayParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    selfLiquidateLoan(
      params: SelfLiquidateLoanParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConfig(
      params: UpdateConfigParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
