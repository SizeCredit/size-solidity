{
	"fuzzing": {
		"workers": 10,
		"workerResetLimit": 50,
		"timeout": 0,
		"testLimit": 0,
		"callSequenceLength": 100,
		"corpusDirectory": "",
		"coverageEnabled": true,
		"targetContracts": [
			"CryticTester"
		],
		"targetContractsBalances": ["0x1043561a8829300000"],
		"constructorArgs": {},
		"deployerAddress": "0x30000",
		"senderAddresses": [
			"0x10000",
			"0x20000",
			"0x30000"
		],
		"blockNumberDelayMax": 60480,
		"blockTimestampDelayMax": 604800,
		"blockGasLimit": 125000000,
		"transactionGasLimit": 12500000,
		"testing": {
			"stopOnFailedTest": true,
			"stopOnFailedContractMatching": true,
			"stopOnNoTests": true,
			"testAllContracts": false,
			"traceAll": false,
			"assertionTesting": {
				"enabled": true,
				"testViewMethods": false,
				"panicCodeConfig": {
					"failOnCompilerInsertedPanic": false,
					"failOnAssertion": true,
					"failOnArithmeticUnderflow": false,
					"failOnDivideByZero": false,
					"failOnEnumTypeConversionOutOfBounds": false,
					"failOnIncorrectStorageAccess": false,
					"failOnPopEmptyArray": false,
					"failOnOutOfBoundsArrayAccess": false,
					"failOnAllocateTooMuchMemory": false,
					"failOnCallUninitializedVariable": false
				}
			},
			"propertyTesting": {
				"enabled": true,
				"testPrefixes": [
					"invariant_"
				]
			},
			"optimizationTesting": {
				"enabled": true,
				"testPrefixes": [
					"optimize_"
				]
			}
		},
		"chainConfig": {
			"codeSizeCheckDisabled": true,
			"cheatCodes": {
				"cheatCodesEnabled": true,
				"enableFFI": false
			}
		}
	},
	"compilation": {
		"platform": "crytic-compile",
		"platformConfig": {
			"target": ".",
			"solcVersion": "",
			"exportDirectory": "",
			"args": ["--compile-libraries=(Errors,0x10),(VariableLibrary,0x11),(UpdateConfig,0x12),(Initialize,0x13),(Events,0x14),(ConversionLibrary,0x15),(OfferLibrary,0x16),(CapsLibrary,0x17),(LoanLibrary,0x18),(RiskLibrary,0x19),(CollateralLibrary,0x1a),(LiquidateWithReplacement,0x1b),(Claim,0x1c),(Deposit,0x1d),(Compensate,0x1e),(BorrowAsMarketOrder,0x1f),(Withdraw,0x20),(Liquidate,0x21),(Repay,0x22),(SelfLiquidate,0x23),(BorrowerExit,0x24),(LendAsLimitOrder,0x25),(LendAsMarketOrder,0x26),(BorrowAsLimitOrder,0x27),(UserLibrary,0x28),(YieldCurveLibrary,0x29),(AccountingLibrary,0x2a),(Math,0x2b),(YieldCurveHelper,0x2c)","--foundry-compile-all"]
		}
	},
	"logging": {
		"level": "info",
		"logDirectory": "",
		"noColor": false
	}
}